[{"name":"app.R","content":"### Microbial Growth Kinetics Sim\r\n## Ver 2.0 \r\n## Fco. Castillo\r\n\r\nlibrary(shiny)\r\nlibrary(dplyr)\r\nlibrary(tidyr)\r\nlibrary(ggplot2)\r\nlibrary(DT)\r\n\r\ngrowthki <- function(time,lat_exp_end,sta_end,mu_lat,mu_exp,mu_sta,mu_dea,ni,y_opt){\r\n  # Parameters\r\n  x1 <- seq(from = time[1], to = time[2], by = .5) \r\n  y <- 0\r\n  fase <- \"lat\"\r\n  \r\n  if (sta_end == 100){\r\n    dea_true <- FALSE\r\n  }else{\r\n    dea_true <- TRUE\r\n  }\r\n  \r\n  for(i in 2:length(x1)){\r\n    if(i < (length(x1)*lat_exp_end[1]/100)){\r\n      y[i] <- y[i-1] + (mu_lat * (x1[i] - x1[i - 1])) \r\n      fase[i] <- \"lat\"\r\n    }else if(i < (length(x1)*lat_exp_end[2]/100)){\r\n      y[i] <- y[i-1] + (mu_exp * (x1[i] - x1[i - 1]))\r\n      fase[i] <- \"exp\"\r\n    }else if(dea_true == TRUE){ #Yes Death\r\n      if(i < (length(x1)*sta_end/100)){ #Stationary\r\n        y[i] <- y[i-1] + (mu_sta * (x1[i] - x1[i - 1])) \r\n        fase[i] <- \"sta\"\r\n      }else{ #Death\r\n        y[i] <- y[i-1] + (-mu_dea * (x1[i] - x1[i - 1])) \r\n        fase[i] <- \"dea\"\r\n      }\r\n    }else{ #Stationary, No Death\r\n      y[i] <- y[i-1] + (mu_sta * (x1[i] - x1[i - 1])) \r\n      fase[i] <- \"sta\"\r\n    }\r\n  }\r\n  \r\n  y_norm <- 10^(y)\r\n  y_ori <- y_norm*ni\r\n  \r\n  df <- data.frame(x = x1,y_log = y, fase = fase,\r\n                   y_norm = y_norm, y_ori = y_ori)\r\n  \r\n  if(y_opt == y_opts[1]){\r\n    df$y <- df$y_ori\r\n  }else if(y_opt == y_opts[2]){\r\n    df$y <- df$y_norm\r\n  }else {\r\n    df$y <- df$y_log\r\n  }\r\n  \r\n  return(df)\r\n  \r\n}\r\n\r\ny_opts <-  c(\"Original data (y)\", \"Normalized (y/y0)\", \"Logarithmic (Log10(y/y0))\")\r\n\r\n# Define UI for application that draws a histogram\r\nui <- fluidPage(\r\n\r\n    # Application title\r\n    titlePanel(\"Microbial Growth Kinetics Simulation\"),\r\n\r\n    # Sidebar with a slider input for number of bins \r\n    sidebarLayout(\r\n        sidebarPanel(\r\n            sliderInput(\"ni\",\"Number of initial cells:\",\r\n                        min = 0.001, max = 0.500, value = 0.05),\r\n            \r\n            sliderInput(\"time\", \"Culture time (hours):\",\r\n                        min = 0, max = 100, value = c(0,24)),\r\n            \r\n            sliderInput(\"mu_lat\",\"Growth rate in the Lat stage\",\r\n                        min = 0.001, max = 0.500, value = 0.025),\r\n            \r\n            sliderInput(\"mu_exp\", \"Growth rate in the Exp stage\",\r\n                        min = 0.001, max = 0.500, value = 0.325),\r\n            \r\n            sliderInput(\"mu_sta\", \"Growth rate in the Sta stage\",\r\n                        min = 0.001, max = 0.500, value = 0.005),\r\n            \r\n            sliderInput(\"mu_dea\", \"Growth rate in the Dea stage\",\r\n                        min = 0.001, max = 0.500, value = 0.05),\r\n            \r\n            sliderInput(\"lat_exp_end\", \"Lat to Exp phase duration (%)\",\r\n                        min = 0.1, max = 90, value = c(10,30)),\r\n            \r\n            uiOutput(\"sta_end\")\r\n        ),\r\n\r\n        # Show a plot of the generated distribution\r\n        mainPanel(\r\n           radioButtons(\"y_opt\",\"Data to plot\", \r\n                       y_opts,y_opts[3]),\r\n           \r\n           plotOutput(\"kineticPlot\"),\r\n           DT::dataTableOutput(\"kineticData\")\r\n           \r\n        )\r\n    )\r\n)\r\n\r\n# Define server logic required to draw a histogram\r\nserver <- function(input, output) {\r\n    \r\n    output$sta_end <- renderUI ({\r\n      sliderInput(\"sta_end\", \"%Duration of Stationary phase\", \r\n                  min = input$lat_exp_end[2],  max = 100, value = 100)  \r\n    })\r\n  \r\n    #Create dataframe\r\n    df <- reactive({growthki(time = input$time,\r\n                             lat_exp_end = input$lat_exp_end,\r\n                             sta_end = input$sta_end,\r\n                             mu_lat = input$mu_lat, \r\n                             mu_exp = input$mu_exp, \r\n                             mu_sta = input$mu_sta, \r\n                             mu_dea = input$mu_dea, \r\n                             ni = input$ni,\r\n                             y_opt = input$y_opt)})\r\n                \r\n\r\n    #Plot kinetic\r\n    output$kineticPlot <- renderPlot({\r\n      ggplot(data = df(),aes(x = x, y = y))+\r\n        geom_point(aes(fill = fase), pch = 21, size = 2)+\r\n        scale_fill_discrete(name = \"Phase\",\r\n          breaks = c(\"lat\",\"exp\",\"sta\",\"dea\"),\r\n          labels = c(\"Lag\", \"Exponential\", \"Stationary\", \"Death\"))\r\n      })\r\n\r\n    #Kinetics Data Table\r\n    output$kineticData <- DT::renderDataTable(\r\n      datatable(\r\n        data = df() %>% select(x, y = y_ori, y_norm, y_log),\r\n        extensions = 'Buttons', \r\n        options = list(dom = 'Bfrtip', ordering = FALSE,\r\n                       buttons = c('copy', 'csv', 'excel', 'pdf', 'print')\r\n          )\r\n        ),\r\n      server = FALSE\r\n      )\r\n}\r\n\r\n# Run the application \r\nshinyApp(ui = ui, server = server)\r\n","type":"text"}]
